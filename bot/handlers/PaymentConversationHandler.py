import os
from datetime import timedelta
from telegram import Update, LabeledPrice, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    CallbackQueryHandler,
    PreCheckoutQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from sqlalchemy import select, update as sa_update
from sqlalchemy.orm import joinedload
from db.db_async import get_async_session
from db.models import Order, Drink, DrinkSize, DrinkAdd, User, OrderAdd
from utils.logging_config import log_function_call, LogExecutionTime, get_logger

ORDER_STATUS_PAYED = 2

ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
if not (ADMIN_CHAT_ID):
    raise RuntimeError("Admin chat id did not set in environment variables")

PAYMENT_TOKEN = os.getenv("UKASSA_TOKEN")

if not (PAYMENT_TOKEN):
    raise RuntimeError("Payment credentials are not set in environment variables")



logger = get_logger(__name__)

@log_function_call(action="Start_payment")
async def pay_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–û–ø–ª–∞—Ç–∏—Ç—å'"""
    query = update.callback_query
    await query.answer()

    order_id = int(query.data.split("_")[1])

    async with get_async_session() as session:
        result = await session.execute(
            select(Order).where(Order.id == order_id)
        )
        order = result.scalar_one_or_none()

    if not order:
        await query.message.reply_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # Telegram –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ü–µ–Ω—É –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö (–∫–æ–ø–µ–π–∫–∏)
    prices = [LabeledPrice("–ö–æ—Ñ–µ", int(order.total_price * 100))]

    await query.message.reply_invoice(
        title="–û–ø–ª–∞—Ç–∞ –∫–æ—Ñ–µ",
        description=f"–ó–∞–∫–∞–∑ #{order.id}",
        provider_token=PAYMENT_TOKEN,
        currency="RUB",
        prices=prices,
        payload=str(order.id),  # –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º id –∑–∞–∫–∞–∑–∞
        start_parameter="coffee-payment",
    )

@log_function_call(action="payment_status_confirmation")
async def precheckout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —à–∞–≥ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π"""
    query = update.pre_checkout_query
    await query.answer(ok=True)



@log_function_call(action="Payment_notion")
async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ"""
    payment = update.message.successful_payment
    order_id = int(payment.invoice_payload)

    async with get_async_session() as session:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await session.execute(
            sa_update(Order)
            .where(Order.id == order_id)
            .values(status_id=ORDER_STATUS_PAYED)
        )
        await session.commit()

        # –î–æ—Å—Ç–∞—ë–º –∑–∞–∫–∞–∑ —Å –¥–µ—Ç–∞–ª—è–º–∏
        result = await session.execute(
            select(Order)
            .options(
                joinedload(Order.drink_size).joinedload(DrinkSize.drink).joinedload(Drink.drink_type),
                joinedload(Order.drink_size).joinedload(DrinkSize.sizes),
                joinedload(Order.order_adds).joinedload(OrderAdd.add),
                joinedload(Order.user),
            )
            .where(Order.id == order_id)
        )
        order = result.scalars().first()

    # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    created_local = order.created_at + timedelta(hours=3)

    adds_text = ", ".join(add.add.name for add in order.order_adds) if order.order_adds else "‚Äî"

    manager_text = (
        f"üß° –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}üíô\n\n"
        f"üî† –ì—Ä—É–ø–ø–∞: <i>{order.drink_size.drink.drink_type.name}</i>\n"
        f"‚òïÔ∏è: <b>{order.drink_size.drink.name}</b>\n"
        f"üìè –†–∞–∑–º–µ—Ä: {order.drink_size.sizes.name}\n"
        f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order.drink_count}\n"
        f"‚ûï –î–æ–±–∞–≤–∫–∏: {adds_text}\n"
        f"üí∞ –û–ø–ª–∞—á–µ–Ω–æ: {order.total_price} ‚ÇΩ\n"
        f"‚è∞ –°–æ–∑–¥–∞–Ω: {created_local.strftime('%H:%M %d.%m.%Y')}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–ª–∏–µ–Ω—Ç–∞: {order.customer_comment or '‚Äî'}\n"
        f"üò∫: {order.user.first_name or order.user.username}"
    )

    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚è≥ 3 –º–∏–Ω", callback_data=f"take_{order.id}_3"),
            InlineKeyboardButton("‚è≥ 5 –º–∏–Ω", callback_data=f"take_{order.id}_5"),
        ],
        [
            InlineKeyboardButton("‚è≥ 10 –º–∏–Ω", callback_data=f"take_{order.id}_10"),
            InlineKeyboardButton("‚è≥ 10+ –º–∏–Ω", callback_data=f"take_{order.id}_10plus"),
        ]
    ])

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    await update.message.reply_text(
        "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞."
    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    await context.bot.send_message(
        chat_id=ADMIN_CHAT_ID,
        text=manager_text,
        reply_markup=keyboard,
        parse_mode='HTML'
    )