import os
import re
from datetime import timedelta
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
    Update
)
from telegram.ext import (
    ConversationHandler,
    CallbackQueryHandler,
    PreCheckoutQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from sqlalchemy import select, update as sa_update
from sqlalchemy.orm import joinedload, selectinload
from db.db_async import get_async_session
from db.models import Order, Drink, DrinkSize, DrinkAdd, User, OrderAdd,Session
from utils.logging_config import log_function_call, LogExecutionTime, get_logger

ORDER_STATUS_PROCESSING = 3
ORDER_STATUS_READY = 4
ORDER_STATUS_RECEIVED = 5

ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
if not (ADMIN_CHAT_ID):
    raise RuntimeError("Admin chat id did not set in environment variables")

# –°–æ—Å—Ç–æ—è–Ω–∏—è
ORDER_READY = 1

logger = get_logger(__name__)

@log_function_call(action="TakeOrder")
async def take_order_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–µ—Ä—ë—Ç –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤—Ä–µ–º–µ–Ω–∏"""
    query = update.callback_query
    await query.answer()

    try:
        _, order_id_str, processing_time_str = query.data.split("_")
        order_id = int(order_id_str)
        processing_time = "–ë–æ–ª–µ–µ 10" if processing_time_str == "10plus" else int(processing_time_str)
    except (ValueError, IndexError):
        await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞.")
        return ConversationHandler.END


    async with get_async_session() as session:
        result = await session.execute(
            select(Order)
            .options(
                selectinload(Order.drink_size)
                    .selectinload(DrinkSize.drink)
                    .selectinload(Drink.drink_type),
                selectinload(Order.drink_size).selectinload(DrinkSize.sizes),
                selectinload(Order.user)    # –∫–ª–∏–µ–Ω—Ç
            )
            .where(Order.id == order_id)
        )
        order = result.scalar_one_or_none()
        if not order:
            await query.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ConversationHandler.END

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ callback.from_user
        tg_manager = query.from_user.id
        manager_result = await session.execute(
            select(User).where(User.tg_user_id == tg_manager)
        )
        manager = manager_result.scalar_one_or_none()

        if not manager:
            await query.message.reply_text("‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
            return ConversationHandler.END
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        order.status_id = ORDER_STATUS_PROCESSING
        order.manager_id = manager.tg_user_id
        order.manager_comment = f"–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ - {processing_time} –º–∏–Ω."
        await session.flush()


        # —É–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        await context.bot.send_message(
            chat_id=order.tg_user_id,
            text=f"‚è≥ {order.manager_comment}"
        )

        # –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        manager_text = (
            f"üß° –ó–∞–∫–∞–∑ #{order.id} –≤ —Ä–∞–±–æ—Ç–µ\n\n"
            f"üî† –ì—Ä—É–ø–ø–∞: <i>{order.drink_size.drink.drink_type.name}</i>\n"
            f"‚òïÔ∏è: <b>{order.drink_size.drink.name}</b>\n"
            f"üìè –†–∞–∑–º–µ—Ä: {order.drink_size.sizes.name}\n"
            f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order.drink_count}\n"
            f"üí∞ –û–ø–ª–∞—á–µ–Ω–æ: {order.total_price} ‚ÇΩ\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–ª–∏–µ–Ω—Ç–∞: {order.customer_comment or '‚Äî'}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.user.first_name or order.user.username}\n"
            f"üßë‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä: {manager.first_name or manager.username}\n"
        )

        # –Ω–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: —Ç–æ–ª—å–∫–æ "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ"
        new_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ", callback_data=f"order_ready_{order.id}")]
        ])

        await query.message.edit_text(
            text=manager_text,
            reply_markup=new_keyboard,
            parse_mode="HTML"
        )
    
        await session.commit()
    return ORDER_READY

# –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–∂–∞–ª "–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ"
@log_function_call(action="OrderReady")
async def order_ready_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        _, _, order_id_str = query.data.split("_")
        order_id = int(order_id_str)
    except ValueError:
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤ callback data")
        return ConversationHandler.END

    async with get_async_session() as session:
        result = await session.execute(
            select(Order)
            .options(
                selectinload(Order.drink_size)
                    .selectinload(DrinkSize.drink)
                    .selectinload(Drink.drink_type),
                selectinload(Order.drink_size).selectinload(DrinkSize.sizes),
                selectinload(Order.user),     # –∫–ª–∏–µ–Ω—Ç
                selectinload(Order.manager),  # –º–µ–Ω–µ–¥–∂–µ—Ä
                selectinload(Order.session)
            )
            .where(Order.id == order_id)
        )
        order = result.scalar_one_or_none()
        if not order:
            await query.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ConversationHandler.END

        # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        order.status_id = ORDER_STATUS_READY
        

        # —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
        drink_name = order.drink_size.drink.name
        size_name = order.drink_size.sizes.name
        client_text = f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ {drink_name} –≤–µ—Ä—Å–∏–∏ {size_name} –≥–æ—Ç–æ–≤! üçπ"

        client_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üì¶ –ó–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω", callback_data=f"order_received_{order.id}")]
        ])

        await context.bot.send_message(
            chat_id=order.tg_user_id,
            text=client_text,
            reply_markup=client_keyboard
        )

        # —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ)
        msg = await query.message.edit_text(
            text=f"‚úÖ –ó–∞–∫–∞–∑ #{order.id} –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ",
            parse_mode="HTML"
        )
        session_obj = await session.get(Session, order.session_id)
        if session_obj:
                session_obj.last_action = {
                    "event": "Manager notification order out",
                    "message_id": msg.message_id
                }
        await session.commit()
    return ConversationHandler.END
