from telegram import (
    Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove,
    InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
)
from telegram.ext import (
    ContextTypes, 
    ConversationHandler, 
    CommandHandler, 
    MessageHandler, 
    filters, 
    CallbackQueryHandler
)

from sqlalchemy import update as sa_update, select, desc
from datetime import datetime
from sqlalchemy.orm import selectinload

from db.db_async import get_async_session

from db.models.users import User
from db.models.sessions import Session
from db.models.roles import Role
from db.models.drinks import Drink
from db.models.orders import Order


from utils.user_session_lastorder import get_user_by_tg_id, create_user, create_session, get_last_order
from utils.escape import safe_html

from utils.logging_config import log_function_call, LogExecutionTime, get_logger

from dotenv import load_dotenv
import os

logger = get_logger(__name__)

MANAGER_LIST = [
    int(m.strip(" []")) for m in os.getenv("MANAGER_ID_LIST", "").split(",") if m.strip(" []")
]

MENU_URL = ["/bot/static/images/menu_1.png", "/bot/static/images/menu_2.png"]
WELCOME_PHOTO = "/bot/static/images/pelmeshek_avatar.png"

WELCOME_TEXT = "–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º —É—é—Ç–Ω–æ–º MEOW_CAFE!"

NAME_REQUEST, MAIN_MENU = range(2)



async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    tg_user = update.effective_user

    try:
        user = await get_user_by_tg_id(user_id)

        if user is None:
            return await begin_registration(update, context, tg_user)
        else:
            return await route_after_login(update, context, user)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}", exc_info=True)
        await update.message.reply_text("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END


async def begin_registration(update: Update, context: ContextTypes.DEFAULT_TYPE, tg_user):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    context.user_data.update({"tg_user": tg_user})
    with open(WELCOME_PHOTO, "rb") as f:
        await update.message.reply_photo(
            photo=f,
            caption=f"{WELCOME_TEXT}\n\n–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è!"
        )

    keyboard = [[KeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∏–∫–Ω–µ–π–º –∏–∑ –¢–ì")]]
    await update.message.reply_text(
        "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return NAME_REQUEST


async def handle_name_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    tg_user = context.user_data.get("tg_user")
    name = update.message.text.strip()
    if not name or name.lower() == "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∏–∫–Ω–µ–π–º –∏–∑ —Ç–≥":
        name = tg_user.first_name.strip()

    context.user_data["first_name"] = name

    await update.message.reply_text(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}!")
    return await handle_registration(update, context)


async def handle_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î"""
    try:
        tg_user = context.user_data.get("tg_user")
        first_name = context.user_data.get("first_name")
        user = await create_user(tg_user, first_name, phone_number=None)

        await update.message.reply_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=ReplyKeyboardRemove())
        return await route_after_login(update, context, user)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", exc_info=True)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return ConversationHandler.END

async def route_after_login(update: Update, context: ContextTypes.DEFAULT_TYPE, user):
    """–†–æ—É—Ç–∏–Ω–≥ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –≤—Ö–æ–¥–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏"""
    print(f"DEBUG: user_id = {user.tg_user_id}\n"
          f"MANAGER_LIST = {MANAGER_LIST}")
    try:
        if user.tg_user_id in MANAGER_LIST:
            role_id = 2
        else:
            role_id = 1

        # –°–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é
        session = await create_session(user.tg_user_id, role_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        context.user_data.update({
            "user_id": user.id,
            "tg_user_id": user.tg_user_id,
            "session_id": session.id,
            "role_id": role_id
        })

        if role_id == 2:
            return await show_manager_menu(update, context, user)
        else:
            return await show_customer_menu(update, context, user)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ route_after_login: {e}", exc_info=True)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END


async def show_manager_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, user):
    keyboard = [
        [InlineKeyboardButton("‚úçüèª–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data="create_card")],
        [InlineKeyboardButton("üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data="edit_card")],
        [InlineKeyboardButton("üì® –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="fresh_orders")],
        [InlineKeyboardButton("üßöüèª‚Äç‚ôÄÔ∏è –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")]
    ]
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.firstname}! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return #–∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –≤ –ª–æ–≥–∏–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞


async def show_customer_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, user):

    last_order = await get_last_order(user.tg_user_id)

    if last_order:
        keyboard = [
            [InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data=f"select_size_{last_order['drink_size_id']}"),
             InlineKeyboardButton("–ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data="new_order")],
            [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é", callback_data="show_menu")]
        ]
        caption = (
            f"–í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–∫–∞–∑:\n\n"
            f"‚Ä¢ <b>{last_order['drink_name']}</b>\n"
            f"‚Ä¢ –í–µ—Ä—Å–∏—è: {last_order['size']}\n"
            f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {last_order['drink_count']}\n"
            f"‚Ä¢ –¶–µ–Ω–∞: {last_order['total_price']}‚ÇΩ\n"
            f"‚Ä¢ –î–∞—Ç–∞: {last_order['created_at'].strftime('%d.%m.%Y')}\n\n"
            f"–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?"
        )
        if last_order["image_file_id"]:
            await update.effective_message.reply_photo(
                photo=last_order["image_file_id"],
                caption=caption,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="HTML"
            )
        else:
            await update.effective_message.reply_text(
                caption,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="HTML"
            )

    else:
        # –ú–µ–Ω—é –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        media_group = [InputMediaPhoto(open(path, "rb")) for path in MENU_URL]
        await update.message.reply_media_group(media_group)
        keyboard = [[InlineKeyboardButton("üçÆ –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="new_order")]]
        await update.message.reply_text(
            "–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞–ø–∏—Ç–∫–∞–º–∏ –≤ –º–µ–Ω—é üòª, —á—Ç–æ–±—ã",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    return #–∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –≤ –ª–æ–≥–∏–∫—É –∫–ª–∏–µ–Ω—Ç–∞

# === –û—Ç–º–µ–Ω–∞ ===
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
        reply_markup=ReplyKeyboardRemove()
    )
    context.user_data.clear()
    return ConversationHandler.END
