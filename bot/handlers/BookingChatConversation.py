from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)

from datetime import datetime

from db.db_async import get_async_session

from bot.db.models.orders import Booking
from bot.db.models.drinks import Apartment
from db.models.users import User

from utils.escape import safe_html
from utils.anti_contact_filter import sanitize_message
from utils.booking_chat_message_history import send_booking_chat_history

from utils.logging_config import log_function_call, LogExecutionTime, get_logger

from sqlalchemy import select, update as sa_update

from sqlalchemy.orm import selectinload


# –°–æ—Å—Ç–æ—è–Ω–∏—è
(
    GO_TO_CHAT,
    BOOKING_CHAT
) = range(2)

logger = get_logger(__name__)

# ‚úÖ 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç
@log_function_call(action="booking_chat_from_menu")
async def open_booking_chat_from_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    logger = get_logger(__name__)
    callback_data = query.data
    try:
        booking_id = int(query.data.split("_")[-1])
        context.user_data["chat_booking_id"] = booking_id
        context.user_data["callback_data"] = callback_data
    except (ValueError, IndexError) as e:
        logger.error(
            "Failed to parse booking_id from callback",
            extra={
                "action": "open_booking_chat",
                "status": "error",
                "callback_data": callback_data,
                "error": str(e),
            }
        )
        await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        return ConversationHandler.END

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π (—É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É)
    await query.edit_message_reply_markup(reply_markup=None)

    await send_booking_chat_history(booking_id, update)

    #–¥–µ–ª–∞–µ–º –æ—Ç–º–µ—Ç–∫—É, —á—Ç–æ –∏—Å—Ç–æ—Ä–∏—é –µ–º—É —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–∞
    shown_key = f"history_shown_{booking_id}"
    context.user_data[shown_key] = True
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —á–∞—Ç
    await query.message.reply_text(
        f"üí¨ –í—ã –≤–æ—à–ª–∏ –≤ —á–∞—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ‚Ññ{booking_id}.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "–î–ª—è –≤—ã—Ö–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel"
    )
    
    return BOOKING_CHAT

# ‚úÖ 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
async def booking_chat_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    booking_id = context.user_data.get("chat_booking_id")
    if not booking_id:
        return  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —á–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

    text = update.message.text
    clean_text = sanitize_message(text)
    user_tg_id = update.effective_user.id

    async with get_async_session() as session:
        # 1. –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        result = await session.execute(
            select(Booking).where(Booking.id == booking_id)
        )
        booking = result.scalar_one_or_none()
        if not booking:
            await update.message.reply_text("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # 2. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Å—Ç—è—Ö –∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ
        renter_id = booking.tg_user_id
        if not renter_id:
            await update.message.reply_text("‚ùå –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ConversationHandler.END

        result = await session.execute(
            select(Apartment).where(Apartment.id == booking.apartment_id)
        )
        apartment = result.scalar_one_or_none()
        if not apartment:
            await update.message.reply_text("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ConversationHandler.END


        owner_id = apartment.owner_tg_id
        if not owner_id:
            await update.message.reply_text("‚ùå –í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ConversationHandler.END

        callback_data = context.user_data.get("callback_data")
        logger.info(
        "Booking chat opened",
        extra={
            "action": "open_booking_chat",
            "status": "success",
            "callback_data": callback_data,
            "booking_id": booking_id,
            "initiator_tg_user_id": user_tg_id,
            "renter_id": renter_id or None,
            "owner_id": owner_id or None
        }
    )

        # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        if user_tg_id == renter_id:
            sender_id = renter_id
            recipient_tg_id = owner_id
            sender_type = "guest"
        elif user_tg_id == owner_id:
            sender_id = owner_id
            recipient_tg_id = renter_id
            sender_type = "owner"
        else:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            return BOOKING_CHAT

        # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        chat_msg = BookingChat(
            booking_id=booking_id,
            sender_tg_id=sender_id,
            message_text=text[:255],
            created_at=datetime.utcnow()
        )
        session.add(chat_msg)
        await session.commit()

    # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ö–ù–û–ü–ö–û–ô –î–õ–Ø –û–¢–í–ï–¢–ê
    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"chat_booking_enter_{booking_id}")]
    ])

    await context.bot.send_message(
        chat_id=recipient_tg_id,
        text=f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é ‚Ññ{booking_id}:\n\n{clean_text}\n\n"
             f"‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {'–ì–æ—Å—Ç—å' if sender_type == 'guest' else '–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫'}",
        reply_markup=reply_markup
    )

    return BOOKING_CHAT

async def enter_booking_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    logger.info(f"ENTER_BOOKING_CHAT: Callback received: '{query.data}'")
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ callback_data
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ callback_data
        booking_id = int(query.data.split("_")[-1])
        logger.info(f"ENTER_BOOKING_CHAT: Extracted booking_id: {booking_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ user_data
        context.user_data["chat_booking_id"] = booking_id
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞–ª–∏ –ª–∏ –∏—Å—Ç–æ—Ä–∏—é –∏–º–µ–Ω–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ booking_id
        shown_key = f"history_shown_{booking_id}"
        if not context.user_data.get(shown_key):
            await send_booking_chat_history(booking_id, update)
            context.user_data[shown_key] = True
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await query.edit_message_text(
            f"üí¨ –í—ã –≤–æ—à–ª–∏ –≤ —á–∞—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ‚Ññ{booking_id}\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
        )
        
        logger.info(f"ENTER_BOOKING_CHAT: Successfully entered chat for booking {booking_id}")
        return BOOKING_CHAT
        
    except Exception as e:
        logger.error(f"ENTER_BOOKING_CHAT: Error processing callback: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —á–∞—Ç")
        return ConversationHandler.END
    
async def exit_booking_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "chat_booking_id" in context.user_data:
        del context.user_data["chat_booking_id"]
    else:
        context.user_data.clear()

    await update.message.reply_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END