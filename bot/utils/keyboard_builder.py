from decimal import Decimal
from sqlalchemy import select
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from db.models import DrinkSize, Size, Image
from db.db_async import get_async_session

def build_types_keyboard(types, selected):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤."""
    keyboard = []
    for t in types:
        mark = "üìç " if t["id"] in selected else ""
        keyboard.append([InlineKeyboardButton(f"{mark}{t['name']}", callback_data=f"type_{t['id']}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard.append([InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="confirm_types")])
    return keyboard

def build_price_filter_keyboard():
    return [
        [InlineKeyboardButton("0 ‚Äì 3000 ‚ÇΩ", callback_data="price_0_3000")],
        [InlineKeyboardButton("3000 ‚Äì 5900 ‚ÇΩ", callback_data="price_3000_5900")],
        [InlineKeyboardButton("6000+ ‚ÇΩ", callback_data="price_6000_plus")],
        [InlineKeyboardButton("üí∞ –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞", callback_data="price_all")]
    ]

def build_add_keyboard(adds, selected):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤."""
    keyboard = []

    for a in adds:
        mark = "üìå " if a["id"] in selected else ""
        keyboard.append([InlineKeyboardButton(f"{mark}{a['name']}", callback_data=f"type_{a['id']}")])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
    if selected:
        # –ï—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ ‚Äî —Ç–æ–ª—å–∫–æ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
        keyboard.append([InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_adds")])
    else:
        # –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö ‚Äî –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        keyboard.append([
            InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip")
        ])

    return keyboard

async def get_drink_sizes_keyboard(drink_id: int) -> tuple[list[dict], InlineKeyboardMarkup]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    1. –°–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—Ä–æ–≤ (–¥–ª—è –ª–æ–≥–∏–∫–∏) ‚Äî list[dict]
    2. InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞

    –ö–Ω–æ–ø–∫–∞: "<–†–∞–∑–º–µ—Ä> ‚Äì <–¶–µ–Ω–∞>‚ÇΩ"
    callback_data: "select_size_<drink_size_id>"
    """
    async with get_async_session() as session:
        result = await session.execute(
            select(
                DrinkSize.id.label("drink_size_id"),
                Size.name.label("size_name"),
                DrinkSize.price
            )
            .join(Size, Size.id == DrinkSize.size_id)
            .where(
                DrinkSize.drink_id == drink_id,
                DrinkSize.is_active == True
            )
            .order_by(DrinkSize.price.asc())
        )
        sizes = result.mappings().all()

                # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Ñ–æ—Ç–æ
        image_result = await session.execute(
            select(Image.tg_file_id)
            .where(Image.drink_id == drink_id, Image.is_active == True)
            .order_by(Image.created_at.asc())
            .limit(1)
        )
        image_row = image_result.first()
        image_file_id = image_row[0] if image_row else None

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–∞–∑–º–µ—Ä–æ–≤
    size_buttons = [
        InlineKeyboardButton(
            f"{s['size_name']} ‚Äì {float(s['price']):.0f}‚ÇΩ",
            callback_data=f"select_size_{s['drink_size_id']}"
        )
        for s in sizes
    ]

    keyboard = [size_buttons]  # –≤—Å–µ —Ä–∞–∑–º–µ—Ä—ã –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
    keyboard.append([InlineKeyboardButton("üîô –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="new_order")])

    return sizes, InlineKeyboardMarkup(keyboard), image_file_id

async def build_order_keyboard(order, adds, selected_adds, total_price):
    """–§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–∞–∫–∞–∑–∞"""
    qty_buttons = [
        InlineKeyboardButton("‚ûñ", callback_data=f"update_qty_-_{order.id}"),
        InlineKeyboardButton(str(order.drink_count), callback_data="noop"),
        InlineKeyboardButton("‚ûï", callback_data=f"update_qty_+_{order.id}")
    ]

    add_buttons = []
    row = []
    for idx, add in enumerate(adds, start=1):
        is_selected = add.id in selected_adds
        label = f"{'üîò ' if is_selected else '‚ö™Ô∏è '}{add.name} - {int(add.price)}‚ÇΩ"
        row.append(InlineKeyboardButton(label, callback_data=f"toggle_add_{add.id}_{order.id}"))
        if idx % 2 == 0:
            add_buttons.append(row)
            row = []
    if row:
        add_buttons.append(row)

    pay_button = [InlineKeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {int(total_price)} ‚ÇΩ", callback_data=f"pay_{order.id}")]

    return InlineKeyboardMarkup([qty_buttons] + add_buttons + [pay_button])